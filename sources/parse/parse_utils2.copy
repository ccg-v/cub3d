/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse_utils2.copy                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ccarrace <ccarrace@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/24 11:30:25 by ccarrace          #+#    #+#             */
/*   Updated: 2024/06/24 12:55:35 by ccarrace         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
// #include "cub3d.h"

size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)
{
	size_t	i;
	size_t	src_length;

	src_length = 0;
	while (src[src_length] != '\0')
		src_length++;
	if (dstsize == 0)
		return (src_length);
	i = 0;
	while ((src[i] != '\0') && (i < (dstsize - 1)))
	{
		dst[i] = src[i];
		i++;
	}
	dst[i] = '\0';
	return (src_length);
}

/*	
 *	is_whitespace()
 *
 *	' ' space, '\t' horizontal tab, '\r' return carriage,
 *	'\v' vertical tab, '\f' form feed
 */
int	is_whitespace(char c)
{
	if (c == ' ' ||
		c == '\t' ||
		c == '\r' ||
		c == '\v' ||
		c == '\f') 
		return (1);
	return (0);
}

// Function to remove leading and trailing whitespaces
void trim_whitespace(char **src)
{
    // Skip leading whitespaces
    while (is_whitespace(**src))
        (*src)++;
    // Remove trailing whitespaces
    char *end = *src + strlen(*src) - 1;
    while (end > *src && is_whitespace(*end))
	{
        *end = '\0';
        end--;
    }
}


/*
 *	remove_spaces_around_comma()
 *
 *	Removes absolutely all whitespaces around the commas, leaving no
 *	space between them and the adjacent words.	
 */
void remove_spaces_around_comma(char **src, char **dst, int *space_found)
{
    if (*dst != *src && is_whitespace(*(*dst - 1)))
        (*dst)--;
    **dst = **src;
    (*dst)++;
    (*src)++;
    while (is_whitespace(**src))
	{
        (*src)++;
	}
	*space_found = 0;
}

/*
 *	reduce_spaces()
 *
 *	Reduces all white spaces between words to just one single space,
 *	but when a comma is found, all white spaces around are removed
 * */
void reduce_spaces(char *src, char *dst)
{
    int space_found;
	
	space_found = 0;
    while (*src != '\0')
	{
        if (is_whitespace(*src))
		{
            space_found = 1;
            src++;
        } 
		else 
		{
            if (*src == ',')
				remove_spaces_around_comma(&src, &dst, &space_found);
			else
			{
                if (space_found && dst != src)
                    *dst++ = ' ';
                *dst++ = *src++;
                space_found = 0;
            }
        }
    }
    *dst = '\0';
}

/*
 *	trim_and_reduce_spaces()
 *
 *	Main function to process the string, removing 
 *		- any leading or trailing white space in the string
 *		- the newline ('\n') character at the end, if it exists
 *		- all white spaces between words, leaving just one single space
 *		- Exception: when a comma is found, no white space will be left 
 *					between the comma and the adjacent words
 */
void trim_and_reduce_spaces(char *line)
{
    char	*src;
	int		len;

	src = line;
    len = strlen(src);
    if (len > 0 && src[len - 1] == '\n')
        src[len - 1] = '\0';
    trim_whitespace(&src);
    char *dst = (char *)malloc(len + 1);
    if (dst == NULL)
	{
        fprintf(stderr, "Memory allocation error\n");
        return;
    }
    reduce_spaces(src, dst);
    ft_strlcpy(line, dst, len + 1);
    free(dst);
}

// int main() {
//     char str1[] = "  	NO	  		 	./textures/test/north.xpm 	  \n";
//     printf("Original: '%s'\n", str1);
//     trim_and_reduce_spaces(str1);
//     printf("Processed: '%s'\n", str1);

//     char str2[] = "		  Color 	 	255 	  ,  32	, 	 213 		 \n";
//     printf("Original: '%s'\n", str2);
//     trim_and_reduce_spaces(str2);
//     printf("Processed: '%s'\n", str2);
//     return 0;
// }